package com.sajansthapit.authserver.authuser.service.impl;import com.sajansthapit.authserver.authuser.model.AuthRole;import com.sajansthapit.authserver.authuser.model.AuthUser;import com.sajansthapit.authserver.authuser.repository.AuthUserRepository;import com.sajansthapit.authserver.authuser.service.IAuthRoleService;import com.sajansthapit.authserver.authuser.service.IAuthUserService;import com.sajansthapit.authserver.config.bootstrap.dto.BootstrapUserDto;import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;import org.springframework.stereotype.Service;import java.util.HashSet;import java.util.Set;import java.util.UUID;@Servicepublic class AuthUserService implements IAuthUserService {    private final IAuthRoleService authRoleService;    private final AuthUserRepository authUserRepository;    private static final String BCRYPT_ENCODER = "{bcrypt}";    public AuthUserService(IAuthRoleService authRoleService, AuthUserRepository authUserRepository) {        this.authRoleService = authRoleService;        this.authUserRepository = authUserRepository;    }    @Override    public void bootstrapUser(BootstrapUserDto bootstrapUserDto) {        AuthUser authUser = new AuthUser();        authUser.setId(UUID.randomUUID().toString());        authUser.setEmail(bootstrapUserDto.getEmail());        authUser.setFullName(bootstrapUserDto.getFullName());        authUser.setUsername(bootstrapUserDto.getUsername());        authUser.setPassword(BCRYPT_ENCODER.concat(new BCryptPasswordEncoder().encode(bootstrapUserDto.getPassword())));        Set<AuthRole> roles = new HashSet<>();        bootstrapUserDto.getRoles().forEach(role ->                roles.add(authRoleService.getByName(role))        );        authUser.setAuthRoles(roles);        authUserRepository.save(authUser);    }    @Override    public long getTotalUser() {        return authUserRepository.count();    }}