package com.sajansthapit.authserver.authclient.service.bootstrap;import com.sajansthapit.authserver.authclient.models.*;import com.sajansthapit.authserver.authclient.repository.AuthClientRepository;import com.sajansthapit.authserver.authclient.repository.PostLogoutRedirectUriRepository;import com.sajansthapit.authserver.authclient.repository.RedirectUriRepository;import com.sajansthapit.authserver.authclient.service.IAuthenticationMethodService;import com.sajansthapit.authserver.authclient.service.IAuthorizationGrantTypeService;import com.sajansthapit.authserver.authclient.service.IScopeService;import com.sajansthapit.authserver.config.bootstrap.dto.BootstrapDefaultClientDto;import com.sajansthapit.authserver.config.bootstrap.service.BootstrapData;import org.springframework.stereotype.Service;import java.util.HashSet;import java.util.List;import java.util.Set;import java.util.UUID;import java.util.stream.Collectors;@Servicepublic class AuthClientBootstrapService implements BootstrapData<BootstrapDefaultClientDto> {    private final AuthClientRepository authClientRepository;    private final RedirectUriRepository redirectUriRepository;    private final PostLogoutRedirectUriRepository postLogoutRedirectUriRepository;    private final IAuthenticationMethodService authenticationMethodService;    private final IAuthorizationGrantTypeService authorizationGrantTypeService;    private final IScopeService scopeService;    public AuthClientBootstrapService(AuthClientRepository authClientRepository, RedirectUriRepository redirectUriRepository, PostLogoutRedirectUriRepository postLogoutRedirectUriRepository, IAuthenticationMethodService authenticationMethodService, IAuthorizationGrantTypeService authorizationGrantTypeService, IScopeService scopeService) {        this.authClientRepository = authClientRepository;        this.redirectUriRepository = redirectUriRepository;        this.postLogoutRedirectUriRepository = postLogoutRedirectUriRepository;        this.authenticationMethodService = authenticationMethodService;        this.authorizationGrantTypeService = authorizationGrantTypeService;        this.scopeService = scopeService;    }    @Override    public void bootstrap(BootstrapDefaultClientDto bootstrapDefaultClientDto) {        AuthClient authClient = new AuthClient();        authClient.setId(UUID.randomUUID().toString());        authClient.setClientId(bootstrapDefaultClientDto.getClientId());        authClient.setClientName(bootstrapDefaultClientDto.getClientName());        authClient.setClientSecret(bootstrapDefaultClientDto.getClientSecret());        authClient.setAuthenticationMethods(getAuthenticationMethods(bootstrapDefaultClientDto.getAuthenticationMethod()));        authClient.setAuthorizationGrantTypes(getAuthorizationGrantType(bootstrapDefaultClientDto.getAuthorizationGrantType()));        authClient.setScopes(getScopes(bootstrapDefaultClientDto.getScope()));        HashSet<RedirectUri> redirectUris = new HashSet<>();        redirectUris.add(saveRedirectUri(bootstrapDefaultClientDto.getRedirectUri()));        HashSet<PostLogoutRedirectUri> postLogoutRedirectUris = new HashSet<>();        postLogoutRedirectUris.add(savePostLogoutRedirectUri(bootstrapDefaultClientDto.getPostLogoutRedirectUri()));        authClient.setRedirectUris(redirectUris);        authClient.setPostLogoutRedirectUris(postLogoutRedirectUris);        authClientRepository.save(authClient);    }    private RedirectUri saveRedirectUri(String uri) {        RedirectUri redirectUri = new RedirectUri();        redirectUri.setId(UUID.randomUUID().toString());        redirectUri.setUri(uri);        return redirectUriRepository.save(redirectUri);    }    private PostLogoutRedirectUri savePostLogoutRedirectUri(String uri) {        PostLogoutRedirectUri postLogoutRedirectUri = new PostLogoutRedirectUri();        postLogoutRedirectUri.setId(UUID.randomUUID().toString());        postLogoutRedirectUri.setUri(uri);        return postLogoutRedirectUriRepository.save(postLogoutRedirectUri);    }    private Set<AuthenticationMethod> getAuthenticationMethods(List<String> methodNames) {       return methodNames.stream().map(authenticationMethodService::getByMethodName).collect(Collectors.toSet());    }    private Set<AuthorizationGrantType> getAuthorizationGrantType(List<String> grantTypes) {        return grantTypes.stream().map(authorizationGrantTypeService::getByGrantType).collect(Collectors.toSet());    }    private Set<Scope> getScopes(List<String> scopes){        return scopes.stream().map(scopeService::getByScopeName).collect(Collectors.toSet());    }}