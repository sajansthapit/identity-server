package com.sajansthapit.authserver.config.security;import com.sajansthapit.authserver.authclient.models.AuthClient;import com.sajansthapit.authserver.authclient.service.IAuthClientService;import org.springframework.security.oauth2.core.AuthorizationGrantType;import org.springframework.security.oauth2.core.ClientAuthenticationMethod;import org.springframework.security.oauth2.server.authorization.client.RegisteredClient;import org.springframework.security.oauth2.server.authorization.client.RegisteredClientRepository;import org.springframework.security.oauth2.server.authorization.settings.ClientSettings;import org.springframework.security.oauth2.server.authorization.settings.TokenSettings;import org.springframework.stereotype.Component;import org.springframework.transaction.annotation.Transactional;import java.time.Duration;import java.util.Set;import java.util.function.Consumer;@Componentpublic class AuthClientDetail implements RegisteredClientRepository {    private final IAuthClientService authClientService;    public AuthClientDetail(IAuthClientService authClientService) {        this.authClientService = authClientService;    }    @Override    public void save(RegisteredClient registeredClient) {    }    @Override    @Transactional    public RegisteredClient findById(String id) {        AuthClient authClient = authClientService.getById(id);        return authClientToRegisteredClient(authClient);    }    @Override    @Transactional    public RegisteredClient findByClientId(String clientId) {        AuthClient authClient = authClientService.getByClientId(clientId);        return authClientToRegisteredClient(authClient);    }    private RegisteredClient authClientToRegisteredClient(AuthClient authClient) {        ClientSettings clientSettings = ClientSettings.builder()                .requireAuthorizationConsent(authClient.isRequireAuthorizationConsent())                .requireProofKey(authClient.isRequireProofKey())                .build();        TokenSettings tokenSettings = TokenSettings.builder()                .accessTokenTimeToLive(Duration.ofSeconds(authClient.getAccessTokenTimeToLive()))                .refreshTokenTimeToLive(Duration.ofSeconds(authClient.getRefreshTokenTimeToLive()))                .reuseRefreshTokens(authClient.isReuseRefreshTokens())                .build();        return RegisteredClient.withId(authClient.getId())                .clientId(authClient.getClientId())                .clientSecret(authClient.getClientSecret())                .clientAuthenticationMethods(getClientAuthenticationMethods(authClient))                .authorizationGrantTypes(getAuthorizationGrantTypes(authClient))                .redirectUris(getRedirectUris(authClient))                .postLogoutRedirectUris(getPostLogoutRedirectUris(authClient))                .scopes(getScopes(authClient))                .clientSettings(clientSettings)                .tokenSettings(tokenSettings)                .build();    }    private Consumer<Set<String>> getRedirectUris(AuthClient authClient) {        return redirectUris -> authClient.getRedirectUris().forEach(authClientRedirectUris ->                redirectUris.add(authClientRedirectUris.getUri())        );    }    private Consumer<Set<String>> getPostLogoutRedirectUris(AuthClient authClient) {        return postLogoutRedirectUris -> authClient.getPostLogoutRedirectUris().forEach(authClientPostLogoutRedirectUri ->                postLogoutRedirectUris.add(authClientPostLogoutRedirectUri.getUri())        );    }    private Consumer<Set<String>> getScopes(AuthClient authClient) {        return scopes -> authClient.getScopes().forEach(authClientScopes ->                scopes.add(authClientScopes.getScopeName())        );    }    private Consumer<Set<ClientAuthenticationMethod>> getClientAuthenticationMethods(AuthClient authClient) {        return authenticationMethods -> authClient.getAuthenticationMethods().forEach(authClientAuthenticationMethod -> {            if (authClientAuthenticationMethod.getMethodName().equals(ClientAuthenticationMethod.CLIENT_SECRET_BASIC.getValue())) {                authenticationMethods.add(ClientAuthenticationMethod.CLIENT_SECRET_BASIC);            }            if (authClientAuthenticationMethod.getMethodName().equals(ClientAuthenticationMethod.CLIENT_SECRET_JWT.getValue())) {                authenticationMethods.add(ClientAuthenticationMethod.CLIENT_SECRET_JWT);            }            if (authClientAuthenticationMethod.getMethodName().equals(ClientAuthenticationMethod.CLIENT_SECRET_POST.getValue())) {                authenticationMethods.add(ClientAuthenticationMethod.CLIENT_SECRET_POST);            }        });    }    private Consumer<Set<AuthorizationGrantType>> getAuthorizationGrantTypes(AuthClient authClient) {        return authorizationGrantTypes -> authClient.getAuthorizationGrantTypes().forEach(authClientGrantType -> {            if (authClientGrantType.getGrantType().equals(AuthorizationGrantType.AUTHORIZATION_CODE.getValue())) {                authorizationGrantTypes.add(AuthorizationGrantType.AUTHORIZATION_CODE);            }            if (authClientGrantType.getGrantType().equals(AuthorizationGrantType.REFRESH_TOKEN.getValue())) {                authorizationGrantTypes.add(AuthorizationGrantType.REFRESH_TOKEN);            }            if (authClientGrantType.getGrantType().equals(AuthorizationGrantType.CLIENT_CREDENTIALS.getValue())) {                authorizationGrantTypes.add(AuthorizationGrantType.CLIENT_CREDENTIALS);            }        });    }}